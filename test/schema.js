// Generated by CoffeeScript 1.3.1
(function() {
  var arraydb, assert, author, book, map, mapdb, testDefinition, testIsSchema, testLoopSubSchemas, testNewSchema, testRewriteFieldOptions;

  assert = require('assert');

  map = require('../lib');

  book = require('./content/book');

  arraydb = require('./array-db');

  author = require('./content/author');

  mapdb = require('./map-db');

  testDefinition = function(callback) {
    assert.equal(book.isSchema, true);
    assert.equal(book.driver, arraydb);
    assert.deepEqual(Object.keys(book.fields), ['title', 'author', 'price', 'tax']);
    return callback();
  };

  testIsSchema = function(callback) {
    assert.ok(map.schema.isSchema(book));
    assert.ok(!map.schema.isSchema({}));
    return callback();
  };

  testLoopSubSchemas = function(callback) {
    var calledEach, each, end;
    calledEach = false;
    each = function(name, field, next) {
      assert.equal(name, 'author');
      assert.equal(field.type, arraydb.types.subschema);
      assert.equal(field.schema, author);
      calledEach = true;
      return next();
    };
    end = function(error) {
      if (error) {
        return callback(error);
      }
      assert.ok(calledEach);
      return callback();
    };
    return map.schema.loopSubSchemas(book, each, end);
  };

  testNewSchema = function(callback) {
    var driver1, fields1, schema1;
    driver1 = map.newDriver({
      find: function() {},
      get: function() {},
      save: function() {}
    });
    fields1 = {
      foo: String,
      bar: String
    };
    schema1 = map.schema.newSchema(driver1, fields1);
    assert.equal(schema1.isSchema, true);
    assert.equal(schema1.driver, driver1);
    assert.deepEqual(schema1.params, []);
    assert.deepEqual(Object.keys(schema1.fields), ['foo', 'bar']);
    return callback();
  };

  testRewriteFieldOptions = function(callback) {
    var options1, options2, rewritten1, rewritten2, subschema;
    subschema = {
      'isSchema': true
    };
    options1 = {
      title: {
        type: String,
        min: 2,
        max: 255
      },
      content: String,
      lastModifiedTS: Date
    };
    options2 = {
      title: String,
      rel: subschema
    };
    rewritten1 = map.schema.rewriteFieldOptions(options1);
    rewritten2 = map.schema.rewriteFieldOptions(options2);
    assert.equal(rewritten1.title.type, map.types.string);
    assert.equal(rewritten1.title.min, 2);
    assert.equal(rewritten1.title.max, 255);
    assert.equal(rewritten1.content.type, map.types.string);
    assert.equal(rewritten1.lastModifiedTS.type, map.types.date);
    assert.equal(rewritten2.title.type, map.types.string);
    assert.equal(rewritten2.rel.type, map.types.subschema);
    assert.equal(rewritten2.rel.schema, subschema);
    return callback();
  };

  module.exports = {
    testDefinition: testDefinition,
    testIsSchema: testIsSchema,
    testLoopSubSchemas: testLoopSubSchemas,
    testNewSchema: testNewSchema,
    testRewriteFieldOptions: testRewriteFieldOptions
  };

}).call(this);
